#Importing Data Set:
a=read.csv('Social_Network_Ads.csv')
a=a[,3:5]

#Splitting the Data set to Training and Testing Data:
library(caTools)
set.seed(123)
split=sample.split(a$Purchased,SplitRatio=0.75)
training_set=subset(a,split==TRUE)
testing_set=subset(a,split==FALSE)

#Feature scaling:
training_set[,1:2]=scale(training_set[,1:2])
testing_set[,1:2]=scale(testing_set[,1:2])

#Dimension Reduction Technique (KPCA):
library(kernlab)
kpca=kpca(~.,data=training_set[,-3],kernel='rbfdot',features=2)
training_set_new=as.data.frame(predict(kpca,training_set))
training_set_new$Purchased=training_set$Purchased
training_set=training_set_new

testing_set_new=as.data.frame(predict(kpca,testing_set))
testing_set_new$Purchased=testing_set$Purchased
testing_set=testing_set_new

#Fitting the data to Logistic Regression Module:
classifier=glm(formula=Purchased~.,family = binomial,data = training_set)

#Finding the Probability of each data and then predicting 0 or 1 :
#Predicting the test set:
prob_predict=predict(classifier,type='response',newdata = testing_set[,-3])
y_pred=ifelse(prob_predict<0.5,0,1)

#Confusion Metrix to evaluate the prediction:
met=table(testing_set$Purchased,y_pred)
Accuracy=(sum(diag(met))/sum(met))*100

#Plotting the Graph:
#Training Data:
library(ElemStatLearn)
set=training_set
x1=seq(min(set[,1])-1,max(set[,1])+1,0.01)
x2=seq(min(set[,2])-1,max(set[,2])+1,0.01)
x_grid=expand.grid(x1,x2)
colnames(x_grid)=c('V1','V2')
prob_predcit_grid=predict(classifier,type='response',newdata = x_grid)
y_pred_grid=ifelse(prob_predcit_grid<0.5,0,1)

#Plotting Scatter Plot:
plot(set[,-3],main='Training Set_KPCA',xlab='V1',ylab='V2',
     xlim=range(x1),ylim=range(x2))
#Plotting Outline :
mat_grid=matrix(as.numeric(y_pred_grid),length(x1),length(x2))
contour(x1,x2,mat_grid,add=TRUE)
points(x_grid,pch='.',col=ifelse(y_pred_grid==1,'springgreen3','tomato'))
#Optimizing Scatter plot
points(set,pch=21,bg=ifelse(set[,3]==1,'green4','red3'))

#Testing Data:
set=testing_set
x1=seq(min(set[,1])-1,max(set[,1])+1,0.01)
x2=seq(min(set[,2])-1,max(set[,2])+1,0.01)
x_grid=expand.grid(x1,x2)
colnames(x_grid)=c('V1','V2')
prob_predcit_grid=predict(classifier,type='response',newdata = x_grid)
y_pred_grid=ifelse(prob_predcit_grid<0.5,0,1)

#Plotting Scatter Plot:
plot(set[,-3],main='Testing_set_KPCA',xlab='V1',ylab='V2',
     xlim=range(x1),ylim=range(x2))
#Plotting Outline :
mat_grid=matrix(as.numeric(y_pred_grid),length(x1),length(x2))
contour(x1,x2,mat_grid,add=TRUE)
points(x_grid,pch='.',col=ifelse(y_pred_grid==1,'springgreen3','tomato'))
#Optimizing Scatter plot
points(set,pch=21,bg=ifelse(set[,3]==1,'green4','red3'))