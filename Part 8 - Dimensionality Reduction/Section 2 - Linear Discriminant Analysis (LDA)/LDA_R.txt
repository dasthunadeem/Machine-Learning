#Importing Data Set:
a=read.csv('Wine.csv')

#Splitting the Data set to Training and Testing Data:
library(caTools)
set.seed(123)
split=sample.split(a$Customer_Segment,SplitRatio=0.8)
training_set=subset(a,split==TRUE)
testing_set=subset(a,split==FALSE)

#Feature scaling:
training_set[,-14]=scale(training_set[,-14])
testing_set[,-14]=scale(testing_set[,-14])

#Dimension Reduction Technique (LDA):
library(MASS)
lda=lda(formula=Customer_Segment~.,data = training_set)
training_set=as.data.frame(predict(lda,training_set))
training_set=training_set[c(5,6,1)]
testing_set=as.data.frame(predict(lda,testing_set))
testing_set=testing_set[c(5,6,1)]

#Fitting the data to Logistic Regression Module:
library(e1071)
classifier=svm(formula=class~.,
               data=training_set,
               type='C-classification',
               kernel='linear')

#Finding the Probability of each data and then predicting 0 or 1 :
#Predicting the test set:
y_pred=predict(classifier,newdata = testing_set[,-3])

#Confusion Metrix to evaluate the prediction:
met=table(testing_set$class,y_pred)
Accuracy=(sum(diag(met))/sum(met))*100

#Plotting the Graph:
#Training Data:
library(ElemStatLearn)
set=training_set
x1=seq(min(set[,1])-1,max(set[,1])+1,0.01)
x2=seq(min(set[,2])-1,max(set[,2])+1,0.01)
x_grid=expand.grid(x1,x2)
colnames(x_grid)=c('x.LD1','x.LD2')
y_pred_grid=predict(classifier,newdata = x_grid)

#Plotting Scatter Plot:
plot(set[,-3],main='Training Set_LDA',xlab='x.LD1',ylab='x.LD2',
     xlim=range(x1),ylim=range(x2))
#Plotting Outline :
mat_grid=matrix(as.numeric(y_pred_grid),length(x1),length(x2))
contour(x1,x2,mat_grid,add=TRUE)
points(x_grid,pch='.',col=ifelse(y_pred_grid==2,'deepskyblue',
                                 ifelse(y_pred_grid==1,'springgreen3','tomato')))
#Optimizing Scatter plot
points(set,pch=21,bg=ifelse(set[,3]==2,'blue',ifelse(set[,3]==1,'green4','red3')))

#Testing Data:
set=testing_set
x1=seq(min(set[,1])-1,max(set[,1])+1,0.01)
x2=seq(min(set[,2])-1,max(set[,2])+1,0.01)
x_grid=expand.grid(x1,x2)
colnames(x_grid)=c('x.LD1','x.LD2')
y_pred_grid=predict(classifier,newdata = x_grid)

#Plotting Scatter Plot:
plot(set[,-3],main='Testing Set_LDA',xlab='x.LD1',ylab='x.LD2',
     xlim=range(x1),ylim=range(x2))
#Plotting Outline :
mat_grid=matrix(as.numeric(y_pred_grid),length(x1),length(x2))
contour(x1,x2,mat_grid,add=TRUE)
points(x_grid,pch='.',col=ifelse(y_pred_grid==2,'deepskyblue',
                                 ifelse(y_pred_grid==1,'springgreen3','tomato')))
#Optimizing Scatter plot
points(set,pch=21,bg=ifelse(set[,3]==2,'blue',ifelse(set[,3]==1,'green4','red3')))